// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
        if(node==null) return node;
        Map<Node, Node> map=new HashMap<>();
        Queue<Node> q=new ArrayDeque<>();
        q.offer(node);
        map.put(node, new Node(node.val, new ArrayList<Node>()));
        while(!q.isEmpty()){
            Node n=q.poll();
           for(Node h:n.neighbors){
               if(!map.containsKey(h)){
                   map.put(h, new Node(h.val, new ArrayList<>()));
                   q.offer(h);
               }
               map.get(n).neighbors.add(map.get(h));
           } 
        }
        
        return map.get(node);
        
    }
}
