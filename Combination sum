class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res=new ArrayList<>();
        backtrack(res, new ArrayList<Integer>(), target, 0, candidates );
        return res;
    }
    
    void backtrack(List<List<Integer>> res, List<Integer> temp, int target, int start, int[] cand){
        if(target<0) return;
        if(target==0) {
            res.add(new ArrayList<>(temp));
            return;
        }
        for(int i=start; i<cand.length; i++){
            temp.add(cand[i]);
            backtrack(res, temp, target-cand[i], i, cand);
            temp.remove(temp.size()-1);
        }
    }
}
#Status: Was a bit confused about the recursion used, but it helped clearing up some concepts.
